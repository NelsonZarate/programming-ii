
Primeiro output:
console.log(hoistVar); // Output: undefined
Isto ocorre porque estamos a tentar aceder à variável hoistVar antes de a declararmos. Variáveis declaradas com var são movidas para o topo do scopo durante a compilação, mas são inicializadas com undefined até atribuirmos um valor .

Segundo output:
notHoistedFunc();
Este erro ocorre quando tentamos chamar uma arrow function atribuída a uma variável (let, const ou var) antes de a inicializarmos.
Ao contrário das funções tradicionais (function), as arrow functions não são movidas para o topo do scopo quando associadas a variáveis. Por isso, o JavaScript não as reconhece até que a linha de declaração seja executada, resultando num erro que interrompe o script.

Terceiro output:
hoistedFunc(); 
Esta função é executada porque funções declaradas com function são completamente movidas para o topo do scopo durante a compilação.
Elas são alocadas em memória antes da execução do código, permitindo que sejam chamadas mesmo antes da sua declaração no script.

Diferenças entre const/let e var:
Variáveis declaradas com var são movidas para o topo do scopo e inicializadas com undefined.
Variáveis declaradas com const/let não são inicializadas durante a compilação. Se tentarmos aceder a elas antes da declaração, o JavaScript lança um ReferenceError (não é um erro de sintaxe, mas sim uma referência inválida).